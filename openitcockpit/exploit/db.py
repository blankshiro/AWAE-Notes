'''
Basic Usage
python3 db.py --create
python3 db.py --insert --location test --content donkey
python3 db.py --getLocations
python3 db.py --get --location test
'''
import sqlite3
import argparse
import os
from typing import Tuple
import sys

def create_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    return conn

def create_db(conn):
    createContentTable="""CREATE TABLE IF NOT EXISTS content (
            id integer PRIMARY KEY,
            location text NOT NULL,
            content blob);"""
    createCookieTable="""CREATE TABLE IF NOT EXISTS cookies (
            id integer PRIMARY KEY,
            cookie text NOT NULL,
            cookies blob);"""
    createCredentialTable="""CREATE TABLE IF NOT EXISTS credentials (
            id integer PRIMARY KEY,
            usr text NOT NULL,
            pw text NOT NULL,
            credentials blob);"""
    try:
        c = conn.cursor()
        c.execute(createContentTable)
        c.execute(createCookieTable)
        c.execute(createCredentialTable)
    except Error as e:
        print(e)
def insert(conn, table, data):
    c = conn.cursor()
    sql = F'''INSERT INTO {table} '''
    if table == 'content':
        sql += 'content(location,content) values(?,?)'
        c.execute(sql, data)
        pass
    elif table == 'cookies':
        sql += 'cookies(cookie,cookies) values(?,?)'
        c.execute(sql, data)
        pass
    elif table == 'credentials':
        sql += 'credentials(usr,pw,credentials) values(?,?,?)'
        c.execute(sql, data)
        pass
    return c.lastrowid



def insert_content(conn, data:Tuple[str,str]):
    sql = ''' INSERT INTO content(location,content)
              VALUES(?,?) '''
    cur = conn.cursor()
    cur.execute(sql, data)
    return cur.lastrowid
def get_content(conn, data:Tuple[str]):
    sql = """SELECT content 
            FROM content 
            WHERE location = ? 
            """
    cur = conn.cursor()
    cur.execute(sql, data)
    row = cur.fetchone()
    return row[0]
def get_locations(conn):
    sql = """SELECT DISTINCT location 
             FROM content"""
    cur = conn.cursor()
    cur.execute(sql)
    rows = cur.fetchall()
    return rows
if __name__ == "__main__":
    database = r"sqlite.db"
    parser = argparse.ArgumentParser()
    parser.add_argument('--create','-c', help='Create Database File', action='store_true')
    parser.add_argument('--delete','-d', help='Remove Database File', action='store_true')
    subparsers = parser.add_subparsers(dest="subparser")
    insert_parser = subparsers.add_parser('insert', help='Insert captured html content, cookies, or, credentials into the database')
    insert_group = insert_parser.add_mutually_exclusive_group(required=True)
    insert_group.add_argument('--content', help='Insert HTML content', action='store_true')
    insert_group.add_argument('--cookies', help='Insert cookies', action="store")
    insert_group.add_argument('--credentials', help='Insert credentials', action='store_true')
    # for content table
    insert_parser.add_argument('--location','-L')
    insert_parser.add_argument('--html')
    # for credentials table
    insert_parser.add_argument('--usr','-u')
    insert_parser.add_argument('--pwd','-p')
    if (len(sys.argv) == 1):
       parser.print_help()
       exit()
    args = parser.parse_args(sys.argv[1:])
    conn = create_connection(database)
    if(args.create):
        print("[+] Creating Database")
        create_db(conn)
        exit()
    if(args.delete):
        print(F"[+] Remove database file {database}")
        os.remove(database)
        exit()
    elif(args.subparser == 'insert'):
        if(args.content):
            if(args.location == None or args.html == None):
                parser.error("--insert --content requires --location, --html.")
            # call insert here
        if(args.cookies):
            print('cookies')
            # call insert here
        if(args.credentials):
            if(args.usr == None or args.pwd == None):
                parser.error("--insert --content requires --usr, --pwd.")
            #call insert here
            print('credentials')
        print(args)
        print('[+] in insert')
        exit()
    '''
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--create','-c', help='Create Database', action='store_true')
    group.add_argument('--delete','-d', help='Remove Database File', action='store_true')
 #   group.add_argument('--insert','-i', help='Insert Content,Cookie, or Credential', choices=['content','cookies', 'credentials'],action='store_true')
    group.add_argument('--insert','-i', help='Insert Content,Cookie, or Credential', choices=['content','cookies', 'credentials'])
    group.add_argument('--get','-g', help='Get Content', action='store_true')
    group.add_argument('--getLocations','-l', help='Get all Locations', action='store_true')
    parser.add_argument('--location','-L')
    parser.add_argument('--content','-C')

    args = parser.parse_args()


    conn = create_connection(database)

    if (args.create):
        print("[+] Creating Database")
        create_db(conn)
    elif (args.insert):
        print(args.insert)
        if(args.location is None and args.content is None):
            parser.error("--insert requires --location, --content.")
        else:
            print("[+] Inserting Data")
            
            insert_content(conn, (args.location, args.content))
            conn.commit()
    elif (args.get):
        if(args.location is None):
            parser.error("--get requires --location, --content.")
        else:
            print("[+] Getting Content")
            print(get_content(conn, (args.location,)))
    if (args.getLocations):
        print("[+] Getting All Locations")
        print(get_locations(conn))
    if (args.delete):
        print(F"[+] Remove database file {database}")
        os.remove(database)
    '''